# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PermissionCount {
  roles: Int!
}

type Permission {
  id: ID!
  title: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  referenceModel: ReferenceModelSlug!
  action: ActionSlug!
  roles: [Role!]
  _count: PermissionCount!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum ReferenceModelSlug {
  blog
  project
  content
  asset
  tag
  user
  role
  permission
}

enum ActionSlug {
  create
  read
  update
  delete
}

type RoleCount {
  users: Int!
  permissions: Int!
}

type Role {
  id: ID!
  title: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User!]
  permissions: [Permission!]
  _count: RoleCount!
}

type AssetCount {
  contents: Int!
}

type Asset {
  id: ID!
  name: String!
  url: String!
  width: Int
  height: Int
  resolution: String
  createdAt: DateTime!
  updatedAt: DateTime!
  contents: [Content!]
  _count: AssetCount!
}

type ContentCount {
  assets: Int!
}

type Content {
  id: ID!
  slug: String!
  markdownContent: String!
  htmlContent: String!
  status: ContentStatus!
  orderNo: Int!
  objectAs: String!
  blogId: String
  projectId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  blog: Blog
  project: Project
  assets: [Asset!]
  _count: ContentCount!
}

enum ContentStatus {
  HIDDEN
  VISIBLE
}

type ProjectCount {
  tags: Int!
  contents: Int!
}

type Project {
  id: ID!
  name: String!
  subtitle: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  hasEdited: Boolean!
  gitRepoLink: String
  projectLink: String
  designLink: String
  status: ProjectStatus!
  orderNo: Int!
  objectAs: String!
  authorId: String!
  author: User!
  tags: [Tag!]
  contents: [Content!]
  _count: ProjectCount!
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

type TagCount {
  blogs: Int!
  projects: Int!
}

type Tag {
  id: ID!
  title: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  color: String
  category: String
  categoryOrder: Int
  tagOrder: Int
  blogs: [Blog!]
  projects: [Project!]
  _count: TagCount!
}

type BlogStat {
  id: ID!
  blogId: String!
  likedCount: Int!
  dislikedCount: Int!
  visitedCount: Int!
  blog: Blog!
}

type BlogCount {
  tags: Int!
  contents: Int!
}

type Blog {
  id: ID!
  title: String!
  slug: String!
  subtitle: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  hasEdited: Boolean!
  authorId: String!
  status: BlogStatus!
  author: User!
  tags: [Tag!]
  contents: [Content!]
  blogStat: BlogStat
  _count: BlogCount!
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

type UserCount {
  blogs: Int!
  projects: Int!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  email: String!
  status: UserStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  headline: String
  lastActiveAt: DateTime!
  avatarURL: String
  roleId: String!
  role: Role!
  blogs: [Blog!]
  projects: [Project!]
  _count: UserCount!
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  DEACTIVATED
  PENDING
  CREATED
}

type LoginResponse {
  access_token: String!
}

type Query {
  users(params: FindManyUsersInput): [User!]!
  user(id: ID!): User
  role(id: ID!): Role
  blogs(findManyBlogsInput: FindManyBlogsInput): [Blog!]!
  blog(id: ID!): Blog!
  project(id: ID!): Project!
  tags(findManyTagsInput: FindManyTagsInput): [Tag!]!
  tag(id: ID!): Tag!
  assets(findManyAssetsInput: FindManyAssetsInput): [Asset!]!
  asset(id: ID!): Asset!
  blogStat(id: ID!): BlogStat!
}

input FindManyUsersInput {
  skip: Int
  take: Int
  cursor: UserWhereUniqueInput
  where: UserWhereUniqueInput
  orderBy: UserWhereUniqueInput
}

input UserWhereUniqueInput {
  id: String
  email: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  firstName: StringFilter
  lastName: StringFilter
  fullName: StringFilter
  password: StringFilter
  status: EnumUserStatusFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringNullableFilter
  headline: StringNullableFilter
  lastActiveAt: DateTimeFilter
  avatarURL: StringNullableFilter
  roleId: StringFilter
  role: RoleRelationFilter
  blogs: BlogListRelationFilter
  projects: ProjectListRelationFilter
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  fullName: StringFilter
  email: StringFilter
  password: StringFilter
  status: EnumUserStatusFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringNullableFilter
  headline: StringNullableFilter
  lastActiveAt: DateTimeFilter
  avatarURL: StringNullableFilter
  roleId: StringFilter
  role: RoleRelationFilter
  blogs: BlogListRelationFilter
  projects: ProjectListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input EnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusFilter
}

input NestedEnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input RoleRelationFilter {
  is: RoleWhereInput
  isNot: RoleWhereInput
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: StringFilter
  title: StringFilter
  slug: StringFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
  permissions: PermissionListRelationFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input PermissionListRelationFilter {
  every: PermissionWhereInput
  some: PermissionWhereInput
  none: PermissionWhereInput
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  id: StringFilter
  title: StringFilter
  slug: StringFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  referenceModel: EnumReferenceModelSlugFilter
  action: EnumActionSlugFilter
  roles: RoleListRelationFilter
}

input EnumReferenceModelSlugFilter {
  equals: ReferenceModelSlug
  in: [ReferenceModelSlug!]
  notIn: [ReferenceModelSlug!]
  not: NestedEnumReferenceModelSlugFilter
}

input NestedEnumReferenceModelSlugFilter {
  equals: ReferenceModelSlug
  in: [ReferenceModelSlug!]
  notIn: [ReferenceModelSlug!]
  not: NestedEnumReferenceModelSlugFilter
}

input EnumActionSlugFilter {
  equals: ActionSlug
  in: [ActionSlug!]
  notIn: [ActionSlug!]
  not: NestedEnumActionSlugFilter
}

input NestedEnumActionSlugFilter {
  equals: ActionSlug
  in: [ActionSlug!]
  notIn: [ActionSlug!]
  not: NestedEnumActionSlugFilter
}

input RoleListRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input BlogListRelationFilter {
  every: BlogWhereInput
  some: BlogWhereInput
  none: BlogWhereInput
}

input BlogWhereInput {
  AND: [BlogWhereInput!]
  OR: [BlogWhereInput!]
  NOT: [BlogWhereInput!]
  id: StringFilter
  title: StringFilter
  slug: StringFilter
  subtitle: StringNullableFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  hasEdited: BoolFilter
  authorId: StringFilter
  status: EnumBlogStatusFilter
  author: UserRelationFilter
  tags: TagListRelationFilter
  contents: ContentListRelationFilter
  blogStat: BlogStatNullableRelationFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input EnumBlogStatusFilter {
  equals: BlogStatus
  in: [BlogStatus!]
  notIn: [BlogStatus!]
  not: NestedEnumBlogStatusFilter
}

input NestedEnumBlogStatusFilter {
  equals: BlogStatus
  in: [BlogStatus!]
  notIn: [BlogStatus!]
  not: NestedEnumBlogStatusFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input TagListRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: StringFilter
  title: StringFilter
  slug: StringFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  color: StringNullableFilter
  category: StringNullableFilter
  categoryOrder: IntNullableFilter
  tagOrder: IntNullableFilter
  blogs: BlogListRelationFilter
  projects: ProjectListRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: StringFilter
  name: StringFilter
  subtitle: StringNullableFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  hasEdited: BoolFilter
  gitRepoLink: StringNullableFilter
  projectLink: StringNullableFilter
  designLink: StringNullableFilter
  status: EnumProjectStatusFilter
  orderNo: IntFilter
  objectAs: StringFilter
  authorId: StringFilter
  author: UserRelationFilter
  tags: TagListRelationFilter
  contents: ContentListRelationFilter
}

input EnumProjectStatusFilter {
  equals: ProjectStatus
  in: [ProjectStatus!]
  notIn: [ProjectStatus!]
  not: NestedEnumProjectStatusFilter
}

input NestedEnumProjectStatusFilter {
  equals: ProjectStatus
  in: [ProjectStatus!]
  notIn: [ProjectStatus!]
  not: NestedEnumProjectStatusFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input ContentListRelationFilter {
  every: ContentWhereInput
  some: ContentWhereInput
  none: ContentWhereInput
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: StringFilter
  slug: StringFilter
  markdownContent: StringFilter
  htmlContent: StringFilter
  status: EnumContentStatusFilter
  orderNo: IntFilter
  objectAs: StringFilter
  blogId: StringNullableFilter
  projectId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  blog: BlogNullableRelationFilter
  project: ProjectNullableRelationFilter
  assets: AssetListRelationFilter
}

input EnumContentStatusFilter {
  equals: ContentStatus
  in: [ContentStatus!]
  notIn: [ContentStatus!]
  not: NestedEnumContentStatusFilter
}

input NestedEnumContentStatusFilter {
  equals: ContentStatus
  in: [ContentStatus!]
  notIn: [ContentStatus!]
  not: NestedEnumContentStatusFilter
}

input BlogNullableRelationFilter {
  is: BlogWhereInput
  isNot: BlogWhereInput
}

input ProjectNullableRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

input AssetListRelationFilter {
  every: AssetWhereInput
  some: AssetWhereInput
  none: AssetWhereInput
}

input AssetWhereInput {
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: StringFilter
  name: StringFilter
  url: StringFilter
  width: IntNullableFilter
  height: IntNullableFilter
  resolution: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  contents: ContentListRelationFilter
}

input BlogStatNullableRelationFilter {
  is: BlogStatWhereInput
  isNot: BlogStatWhereInput
}

input BlogStatWhereInput {
  AND: [BlogStatWhereInput!]
  OR: [BlogStatWhereInput!]
  NOT: [BlogStatWhereInput!]
  id: StringFilter
  blogId: StringFilter
  likedCount: IntFilter
  dislikedCount: IntFilter
  visitedCount: IntFilter
  blog: BlogRelationFilter
}

input BlogRelationFilter {
  is: BlogWhereInput
  isNot: BlogWhereInput
}

input FindManyBlogsInput {
  skip: Int
  take: Int
  cursor: BlogWhereUniqueInput
  where: BlogWhereUniqueInput
  orderBy: BlogWhereUniqueInput
}

input BlogWhereUniqueInput {
  id: String
  slug: String
  AND: [BlogWhereInput!]
  OR: [BlogWhereInput!]
  NOT: [BlogWhereInput!]
  title: StringFilter
  subtitle: StringNullableFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  hasEdited: BoolFilter
  authorId: StringFilter
  status: EnumBlogStatusFilter
  author: UserRelationFilter
  tags: TagListRelationFilter
  contents: ContentListRelationFilter
  blogStat: BlogStatNullableRelationFilter
}

input FindManyTagsInput {
  skip: Int
  take: Int
  cursor: TagWhereUniqueInput
  where: TagWhereUniqueInput
  orderBy: TagWhereUniqueInput
}

input TagWhereUniqueInput {
  id: String
  slug: String
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  title: StringFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  color: StringNullableFilter
  category: StringNullableFilter
  categoryOrder: IntNullableFilter
  tagOrder: IntNullableFilter
  blogs: BlogListRelationFilter
  projects: ProjectListRelationFilter
}

input FindManyAssetsInput {
  skip: Int
  take: Int
  cursor: AssetWhereUniqueInput
  where: AssetWhereUniqueInput
  orderBy: AssetWhereUniqueInput
}

input AssetWhereUniqueInput {
  id: String
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  name: StringFilter
  url: StringFilter
  width: IntNullableFilter
  height: IntNullableFilter
  resolution: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  contents: ContentListRelationFilter
}

type Mutation {
  login(email: String!, password: String!): LoginResponse!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(id: ID!, updateUserInput: UpdateUserInput!): User!
  deleteUser(id: ID!): User!
  roles(params: FindManyRolesInput): Role!
  createRole(createRoleInput: CreateRoleInput!): Role!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  deleteRole(id: ID!): Role!
  createBlog(createBlogInput: CreateBlogInput!): Blog!
  updateBlog(updateBlogInput: UpdateBlogInput!): Blog!
  deleteBlog(id: ID!): Blog!
  createProject(createProjectInput: CreateProjectInput!): Project!
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  deleteProject(id: ID!): Project!
  createTag(createTagInput: CreateTagInput!): Tag!
  updateTag(updateTagInput: UpdateTagInput!): Tag!
  deleteTag(id: ID!): Tag!
  createAsset(createAssetInput: CreateAssetInput!): Asset!
  updateAsset(updateAssetInput: UpdateAssetInput!): Asset!
  deleteAsset(id: ID!): Asset!
  createBlogStat(createBlogStatInput: CreateBlogStatInput!): BlogStat!
  updateBlogStat(updateBlogStatInput: UpdateBlogStatInput!): BlogStat!
  deleteBlogStat(id: ID!): BlogStat!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  fullName: String!
  email: String!
  password: String!
  status: UserStatus!
  title: String
  headline: String
  avatarURL: String
  roleId: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  status: String
  title: String
  headline: String
  lastActiveAt: DateTime
  avatarURL: String
  roleId: String
}

input FindManyRolesInput {
  skip: Int
  take: Int
  cursor: RoleWhereUniqueInput
  where: RoleWhereUniqueInput
  orderBy: RoleWhereUniqueInput
}

input RoleWhereUniqueInput {
  id: String
  slug: String
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  title: StringFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
  permissions: PermissionListRelationFilter
}

input CreateRoleInput {
  title: String!
  description: String
  userIds: [String!]
  permissions: [String!]
}

input UpdateRoleInput {
  title: String
  description: String
  userIds: [String!]
  permissions: [String!]
  id: String!
}

input CreateBlogInput {
  title: String!
  subtitle: String
  description: String
  status: BlogStatus!
  authorId: String!
  tagIds: [String!]
  contents: [CreateContentInput!]!
}

input CreateContentInput {
  slug: String!
  markdownContent: String!
  htmlContent: String!
  status: ContentStatus!
  orderNo: Int!
  objectAs: String!
}

input UpdateBlogInput {
  id: String!
  title: String
  subtitle: String
  description: String
  status: BlogStatus
  tagIds: [String!]
  contents: [UpdateContentInput!]
}

input UpdateContentInput {
  slug: String!
  markdownContent: String
  htmlContent: String
  status: ContentStatus
  orderNo: Int
  objectAs: String
}

input CreateProjectInput {
  name: String!
  subtitle: String!
  description: String!
  gitRepoLink: String!
  projectLink: String!
  designLink: String!
  status: ProjectStatus!
  orderNo: Int!
  objectAs: String!
  authorId: String!
  tagIds: [String!]!
  contents: [CreateContentInput!]!
}

input UpdateProjectInput {
  id: ID!
  name: String
  subtitle: String
  description: String
  gitRepoLink: String
  projectLink: String
  designLink: String
  status: ProjectStatus
  orderNo: Int
  objectAs: String
  tagIds: [String!]
  contents: [UpdateContentInput!]
}

input CreateTagInput {
  title: String!
  description: String!
  color: String!
  category: String!
  categoryOrder: Int!
  tagOrder: Int!
}

input UpdateTagInput {
  title: String!
  description: String!
  color: String!
  category: String!
  categoryOrder: Int!
  tagOrder: Int!
  id: String!
}

input CreateAssetInput {
  name: String!
  url: String!
  width: Int
  height: Int
  resolution: String
  contentIds: [String!]
}

input UpdateAssetInput {
  name: String
  url: String
  width: Int
  height: Int
  resolution: String
  contentIds: [String!]
  id: ID!
}

input CreateBlogStatInput {
  blogId: ID!
  likedCount: Int!
  dislikedCount: Int!
  visitedCount: Int!
}

input UpdateBlogStatInput {
  blogId: ID!
  likedCount: Int!
  dislikedCount: Int!
  visitedCount: Int!
  id: ID!
}