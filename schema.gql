# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: ID!
  title: String!
  slug: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  email: String!
  password: String!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  headline: String
  lastActiveAt: DateTime
  avatarURL: String
  role: Role
}

type LoginResponse {
  access_token: String!
}

type Blog {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Query {
  users(params: FindManyUsersInput): [User!]!
  user(id: ID!): User
  roles(params: FindManyRolesInput): [Role!]!
  role(id: ID!): Role
  blog(id: Int!): Blog!
}

input FindManyUsersInput {
  skip: Int
  take: Int
  cursor: UserWhereUniqueInput
  where: UserWhereUniqueInput
  orderBy: UserWhereUniqueInput
}

input UserWhereUniqueInput {
  id: String
  email: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  firstName: StringFilter
  lastName: StringFilter
  fullName: StringFilter
  password: StringFilter
  status: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringNullableFilter
  headline: StringNullableFilter
  lastActiveAt: DateTimeNullableFilter
  avatarURL: StringNullableFilter
  roleId: StringFilter
  role: RoleRelationFilter
  blogs: BlogListRelationFilter
  projects: ProjectListRelationFilter
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  fullName: StringFilter
  email: StringFilter
  password: StringFilter
  status: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringNullableFilter
  headline: StringNullableFilter
  lastActiveAt: DateTimeNullableFilter
  avatarURL: StringNullableFilter
  roleId: StringFilter
  role: RoleRelationFilter
  blogs: BlogListRelationFilter
  projects: ProjectListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input RoleRelationFilter {
  is: RoleWhereInput
  isNot: RoleWhereInput
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: StringFilter
  title: StringFilter
  slug: StringFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input BlogListRelationFilter {
  every: BlogWhereInput
  some: BlogWhereInput
  none: BlogWhereInput
}

input BlogWhereInput {
  AND: [BlogWhereInput!]
  OR: [BlogWhereInput!]
  NOT: [BlogWhereInput!]
  id: StringFilter
  title: StringFilter
  subtitle: StringNullableFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  hasEdited: BoolFilter
  authorId: StringFilter
  author: UserRelationFilter
  tags: TagListRelationFilter
  contents: ContentListRelationFilter
  blogStat: BlogStatNullableRelationFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input TagListRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: StringFilter
  title: StringFilter
  slug: StringFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  color: StringNullableFilter
  category: StringNullableFilter
  categoryOrder: IntNullableFilter
  tagOrder: IntNullableFilter
  blogs: BlogListRelationFilter
  projects: ProjectListRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: StringFilter
  name: StringFilter
  subtitle: StringNullableFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  hasEdited: BoolFilter
  gitRepoLink: StringNullableFilter
  projectLink: StringNullableFilter
  designLink: StringNullableFilter
  status: StringFilter
  orderNo: IntFilter
  objectAs: StringFilter
  authorId: StringFilter
  author: UserRelationFilter
  tags: TagListRelationFilter
  contents: ContentListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input ContentListRelationFilter {
  every: ContentWhereInput
  some: ContentWhereInput
  none: ContentWhereInput
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: StringFilter
  title: StringFilter
  slug: StringFilter
  markdownContent: StringFilter
  htmlContent: StringFilter
  status: StringFilter
  orderNo: IntFilter
  objectAs: StringFilter
  blogId: StringNullableFilter
  projectId: StringNullableFilter
  blog: BlogNullableRelationFilter
  project: ProjectNullableRelationFilter
  assets: AssetListRelationFilter
}

input BlogNullableRelationFilter {
  is: BlogWhereInput
  isNot: BlogWhereInput
}

input ProjectNullableRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

input AssetListRelationFilter {
  every: AssetWhereInput
  some: AssetWhereInput
  none: AssetWhereInput
}

input AssetWhereInput {
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: StringFilter
  name: StringFilter
  url: StringFilter
  width: IntNullableFilter
  height: IntNullableFilter
  resolution: StringNullableFilter
  contents: ContentListRelationFilter
}

input BlogStatNullableRelationFilter {
  is: BlogStatWhereInput
  isNot: BlogStatWhereInput
}

input BlogStatWhereInput {
  AND: [BlogStatWhereInput!]
  OR: [BlogStatWhereInput!]
  NOT: [BlogStatWhereInput!]
  id: StringFilter
  blogId: StringFilter
  likedCount: IntFilter
  dislikedCount: IntFilter
  visitedCount: IntFilter
  blog: BlogRelationFilter
}

input BlogRelationFilter {
  is: BlogWhereInput
  isNot: BlogWhereInput
}

input FindManyRolesInput {
  skip: Int
  take: Int
  cursor: RoleWhereUniqueInput
  where: RoleWhereUniqueInput
  orderBy: RoleWhereUniqueInput
}

input RoleWhereUniqueInput {
  id: String
  slug: String
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  title: StringFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

type Mutation {
  login(email: String!, password: String!): LoginResponse!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(id: ID!, updateUserInput: UpdateUserInput!): User!
  deleteUser(id: ID!): User!
  createRole(createUserInput: CreateRoleInput!): Role!
  updateRole(id: ID!, updateUserInput: UpdateRoleInput!): Role!
  deleteRole(id: ID!): Role!
  createBlog(createBlogInput: CreateBlogInput!): Blog!
  updateBlog(updateBlogInput: UpdateBlogInput!): Blog!
  removeBlog(id: Int!): Blog!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  fullName: String!
  email: String!
  password: String!
  status: String!
  title: String
  headline: String
  avatarURL: String
  roleId: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  status: String
  title: String
  headline: String
  lastActiveAt: DateTime
  avatarURL: String
  roleId: String
}

input CreateRoleInput {
  title: String!
  description: String
  userIds: [String!]
}

input UpdateRoleInput {
  title: String
  description: String
  userIds: [String!]
  id: String!
}

input CreateBlogInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateBlogInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}